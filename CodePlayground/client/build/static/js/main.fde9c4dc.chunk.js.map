{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","syncUpdates","data","state","axios","post","catch","console","error","runCode","html","css","js","document","refs","iframe","contentDocument","documentContents","open","write","close","id","pusher","Pusher","cluster","forceTLS","channel","subscribe","this","setState","pushid","bind","codeMirrorOptions","theme","lineNumbers","scrollbarStyle","lineWrapping","className","value","options","mode","onBeforeChange","editor","title","ref","class","href","Component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"6UAgKeA,E,kDAjJb,aAAe,IAAD,8BACZ,gBAqCFC,YAAc,WACZ,IAAMC,EAAI,eAAQ,EAAKC,OAEvBC,IACGC,KAAK,0DAA2DH,GAChEI,MAAMC,QAAQC,QA3CL,EA8CdC,QAAU,WACR,MAA0B,EAAKN,MAAvBO,EAAR,EAAQA,KAAMC,EAAd,EAAcA,IAAKC,EAAnB,EAAmBA,GAGbC,EADS,EAAKC,KAAKC,OACDC,gBAClBC,EAAgB,oTASdN,EATc,oEAahBD,EAbgB,gEAedE,EAfc,4DAqBtBC,EAASK,OACTL,EAASM,MAAMF,GACfJ,EAASO,SAxET,EAAKjB,MAAQ,CACXkB,GAAI,GACJX,KAAM,GACNC,IAAK,GACLC,GAAI,IAGN,EAAKU,OAAS,IAAIC,IAAO,uBAAwB,CAC/CC,QAAS,KACTC,UAAU,IAGZ,EAAKC,QAAU,EAAKJ,OAAOK,UAAU,UAdzB,E,sDAiBd,WACEC,KAAKnB,Y,+BAGP,WAAqB,IAAD,OAClBmB,KAAKC,SAAS,CACZR,GAAIS,QAGNF,KAAKF,QAAQK,KAAK,eAAe,SAAA7B,GAC/B,IAAQmB,EAAO,EAAKlB,MAAZkB,GACJnB,EAAKmB,KAAOA,GAEhB,EAAKQ,SAAS,CACZnB,KAAMR,EAAKQ,KACXC,IAAKT,EAAKS,IACVC,GAAIV,EAAKU,U,oBA4Cf,WAAU,IAAD,OACP,EAA0BgB,KAAKzB,MAAvBO,EAAR,EAAQA,KAAME,EAAd,EAAcA,GAAID,EAAlB,EAAkBA,IACZqB,EAAoB,CACxBC,MAAO,WACPC,aAAa,EACbC,eAAgB,KAChBC,cAAc,GAGhB,OACE,sBAAKC,UAAU,MAAf,UACE,0BAASA,UAAU,aAAnB,UACE,sBAAKA,UAAU,wBAAf,UACE,qBAAKA,UAAU,gBAAf,kBACA,cAAC,aAAD,CACEC,MAAO5B,EACP6B,QAAO,aACLC,KAAM,aACHR,GAELS,eAAgB,SAACC,EAAQxC,EAAMQ,GAC7B,EAAKmB,SAAS,CAAEnB,SAAQ,kBAAM,EAAKT,uBAIzC,sBAAKoC,UAAU,uBAAf,UACE,qBAAKA,UAAU,gBAAf,iBACA,cAAC,aAAD,CACEC,MAAO3B,EACP4B,QAAO,aACLC,KAAM,OACHR,GAELS,eAAgB,SAACC,EAAQxC,EAAMS,GAC7B,EAAKkB,SAAS,CAAElB,QAAO,kBAAM,EAAKV,uBAIxC,sBAAKoC,UAAU,sBAAf,UACE,qBAAKA,UAAU,gBAAf,wBACA,cAAC,aAAD,CACEC,MAAO1B,EACP2B,QAAO,aACLC,KAAM,cACHR,GAELS,eAAgB,SAACC,EAAQxC,EAAMU,GAC7B,EAAKiB,SAAS,CAAEjB,OAAM,kBAAM,EAAKX,0BAKzC,yBAASoC,UAAU,SAAnB,SACE,wBAAQM,MAAM,SAASN,UAAU,SAASO,IAAI,aAEhD,qBAAKP,UAAU,SAAf,SACE,sBAAKQ,MAAM,SAAX,UACE,mBAAGA,MAAM,cAAcC,KAAK,uDAA5B,sBACA,mBAAGD,MAAM,cAAcC,KAAK,wCAA5B,uBACA,mBAAGD,MAAM,cAAcC,KAAK,gCAA5B,oBACA,uE,GA1IMC,aCFHC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF9C,SAAS+C,eAAe,SAM1BZ,M","file":"static/js/main.fde9c4dc.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Controlled as CodeMirror } from \"react-codemirror2\";\nimport Pusher from \"pusher-js\";\nimport pushid from \"pushid\";\nimport axios from \"axios\";\n\nimport \"./App.css\";\nimport \"codemirror/lib/codemirror.css\";\nimport \"codemirror/theme/material.css\";\n\nimport \"codemirror/mode/htmlmixed/htmlmixed\";\nimport \"codemirror/mode/css/css\";\nimport \"codemirror/mode/javascript/javascript\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      id: \"\",\n      html: \"\",\n      css: \"\",\n      js: \"\"\n    };\n\n    this.pusher = new Pusher(\"18160601861a89d7f8f7\", {\n      cluster: \"eu\",\n      forceTLS: true\n    });\n\n    this.channel = this.pusher.subscribe(\"editor\");\n  }\n\n  componentDidUpdate() {\n    this.runCode();\n  }\n\n  componentDidMount() {\n    this.setState({\n      id: pushid()\n    });\n\n    this.channel.bind(\"text-update\", data => {\n      const { id } = this.state;\n      if (data.id === id) return;\n\n      this.setState({\n        html: data.html,\n        css: data.css,\n        js: data.js\n      });\n    });\n  }\n\n  syncUpdates = () => {\n    const data = { ...this.state };\n\n    axios\n      .post(\"https://code-playground1007.herokuapp.com/update-editor\", data)\n      .catch(console.error);\n  };\n\n  runCode = () => {\n    const { html, css, js } = this.state;\n\n    const iframe = this.refs.iframe;\n    const document = iframe.contentDocument;\n    const documentContents = `\n      <!DOCTYPE html>\n      <html lang=\"en\">\n      <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <meta http-equiv=\"X-UA-Compatible\" content=\"ie=edge\">\n        <title>Document</title>\n        <style>\n          ${css}\n        </style>\n      </head>\n      <body>\n        ${html}\n        <script type=\"text/javascript\">\n          ${js}\n        </script>\n      </body>\n      </html>\n    `;\n\n    document.open();\n    document.write(documentContents);\n    document.close();\n  };\n\n  render() {\n    const { html, js, css } = this.state;\n    const codeMirrorOptions = {\n      theme: \"material\",\n      lineNumbers: true,\n      scrollbarStyle: null,\n      lineWrapping: true\n    };\n\n    return (\n      <div className=\"App\">\n        <section className=\"playground\">\n          <div className=\"code-editor html-code\">\n            <div className=\"editor-header\">HTML</div>\n            <CodeMirror\n              value={html}\n              options={{\n                mode: \"htmlmixed\",\n                ...codeMirrorOptions\n              }}\n              onBeforeChange={(editor, data, html) => {\n                this.setState({ html }, () => this.syncUpdates());\n              }}\n            />\n          </div>\n          <div className=\"code-editor css-code\">\n            <div className=\"editor-header\">CSS</div>\n            <CodeMirror\n              value={css}\n              options={{\n                mode: \"css\",\n                ...codeMirrorOptions\n              }}\n              onBeforeChange={(editor, data, css) => {\n                this.setState({ css }, () => this.syncUpdates());\n              }}\n            />\n          </div>\n          <div className=\"code-editor js-code\">\n            <div className=\"editor-header\">JavaScript</div>\n            <CodeMirror\n              value={js}\n              options={{\n                mode: \"javascript\",\n                ...codeMirrorOptions\n              }}\n              onBeforeChange={(editor, data, js) => {\n                this.setState({ js }, () => this.syncUpdates());\n              }}\n            />\n          </div>\n        </section>\n        <section className=\"result\">\n          <iframe title=\"result\" className=\"iframe\" ref=\"iframe\" />\n        </section>\n        <div className=\"footer\">\n          <div class=\"social\">\n            <a class=\"footer-link\" href=\"https://www.linkedin.com/in/shreyash-jain-39b840204/\">LinkedIn</a>\n            <a class=\"footer-link\" href=\"https://www.instagram.com/shreyash.x/\">Instagram</a>\n            <a class=\"footer-link\" href=\"https://github.com/shreyash-x\">Github</a>\n            <p>Developed by Shreyash Jain</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}